#!/usr/bin/env node

/**
 * Data Refresh Script
 *
 * This script converts centralized JSON files to JavaScript data files
 * used by the Explorer applications. It processes:
 * - JSON/recipes.json -> Data/recipes-data.js
 * - JSON/buildings.json -> Data/buildings-data.js
 * - JSON/planets.json -> Data/planet-data.js
 */

const fs = require('fs');
const path = require('path');

// Configuration
const JSON_DIR = '../JSON';
const DATA_DIR = '../Data';

// File mappings: [jsonFile, jsFile, globalVarName]
const FILE_MAPPINGS = [
    ['recipes.json', 'recipes-data.js', 'rawRecipeData'],
    ['buildings.json', 'buildings-data.js', 'rawBuildingData'],
    ['planets.json', 'planet-data.js', 'planetData'],
    ['resources.json', 'resources-data.js', 'resourcesData']
];

/**
 * Convert JSON file to JavaScript data file
 */
function convertJsonToJs(jsonPath, jsPath, globalVarName) {
    try {
        console.log(`üì¶ Processing ${jsonPath}...`);

        // Read JSON file
        const jsonData = fs.readFileSync(jsonPath, 'utf8');
        const data = JSON.parse(jsonData);

        // Generate JavaScript content
        const jsContent = `// Auto-generated from ${path.basename(jsonPath)}
// Last updated: ${new Date().toISOString()}
// This file is automatically generated by refresh-data.js

const ${globalVarName} = ${JSON.stringify(data, null, 2)};

// Make available globally
if (typeof window !== 'undefined') {
    window.${globalVarName} = ${globalVarName};
}

// Export for Node.js environments
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ${globalVarName};
}
`;

        // Write JavaScript file
        fs.writeFileSync(jsPath, jsContent, 'utf8');

        const stats = fs.statSync(jsonPath);
        const fileSizeKB = (stats.size / 1024).toFixed(1);

        console.log(`‚úÖ Generated ${jsPath} (${fileSizeKB} KB)`);
        return true;

    } catch (error) {
        console.error(`‚ùå Error processing ${jsonPath}:`, error.message);
        return false;
    }
}

/**
 * Ensure directory exists
 */
function ensureDir(dirPath) {
    if (!fs.existsSync(dirPath)) {
        fs.mkdirSync(dirPath, { recursive: true });
        console.log(`üìÅ Created directory: ${dirPath}`);
    }
}

/**
 * Main execution
 */
function main() {
    console.log('üöÄ Starting Data Refresh Process...\n');

    // Ensure directories exist
    ensureDir(DATA_DIR);

    // Check if JSON directory exists
    if (!fs.existsSync(JSON_DIR)) {
        console.error(`‚ùå JSON directory not found: ${JSON_DIR}`);
        console.log('Please ensure the following files exist:');
        FILE_MAPPINGS.forEach(([jsonFile]) => {
            console.log(`   - ${JSON_DIR}/${jsonFile}`);
        });
        process.exit(1);
    }

    let successCount = 0;
    let totalCount = 0;

    // Process each file mapping
    FILE_MAPPINGS.forEach(([jsonFile, jsFile, globalVar]) => {
        const jsonPath = path.join(JSON_DIR, jsonFile);
        const jsPath = path.join(DATA_DIR, jsFile);

        totalCount++;

        if (!fs.existsSync(jsonPath)) {
            console.warn(`‚ö†Ô∏è  JSON file not found: ${jsonPath}`);
            return;
        }

        if (convertJsonToJs(jsonPath, jsPath, globalVar)) {
            successCount++;
        }
    });

    // Summary
    console.log(`\nüìä Refresh Summary:`);
    console.log(`   ‚úÖ Successful: ${successCount}/${totalCount}`);
    console.log(`   üìÅ Data directory: ${DATA_DIR}`);

    if (successCount === totalCount) {
        console.log('\nüéâ All data files refreshed successfully!');
        console.log('\nüí° Usage:');
        console.log('   ‚Ä¢ Include the Data/*.js files in your HTML');
        console.log('   ‚Ä¢ Access data via DataLoader.loadExplorerData() or global variables');
        console.log('   ‚Ä¢ Re-run this script whenever JSON files are updated');
    } else {
        console.log(`\n‚ö†Ô∏è  ${totalCount - successCount} file(s) failed to process`);
        process.exit(1);
    }
}

// Execute if run directly
if (require.main === module) {
    main();
}

module.exports = { convertJsonToJs, main };